-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cl_box is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ctl_cmd_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ctl_cmd_stream_empty_n : IN STD_LOGIC;
    ctl_cmd_stream_read : OUT STD_LOGIC;
    a_baseaddr : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_baseaddr_ap_vld : OUT STD_LOGIC;
    b_baseaddr : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_baseaddr_ap_vld : OUT STD_LOGIC;
    c_baseaddr : OUT STD_LOGIC_VECTOR (31 downto 0);
    c_baseaddr_ap_vld : OUT STD_LOGIC;
    a_row : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_row_ap_vld : OUT STD_LOGIC;
    a_col : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_col_ap_vld : OUT STD_LOGIC;
    b_col : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_col_ap_vld : OUT STD_LOGIC;
    work_id : OUT STD_LOGIC_VECTOR (31 downto 0);
    work_id_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cl_box is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cl_box_cl_box,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.404000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=210,HLS_SYN_LUT=360,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ctl_cmd_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln22_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal cmd_array_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmd_array_ce0 : STD_LOGIC;
    signal cmd_array_we0 : STD_LOGIC;
    signal cmd_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmd_array_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal cmd_array_ce1 : STD_LOGIC;
    signal cmd_array_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cl_box_Pipeline_1_fu_173_ap_start : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_ap_done : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_ap_idle : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_ap_ready : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_cmd_array_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cl_box_Pipeline_1_fu_173_cmd_array_ce0 : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_cmd_array_we0 : STD_LOGIC;
    signal grp_cl_box_Pipeline_1_fu_173_cmd_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_idle : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_ready : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ctl_cmd_stream_read : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_ce0 : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_we0 : STD_LOGIC;
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cl_box_Pipeline_1_fu_173_ap_start_reg : STD_LOGIC := '0';
    signal grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_187_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln30_fu_203_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln32_fu_217_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cl_box_cl_box_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cmd_array_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cmd_array_ce0 : OUT STD_LOGIC;
        cmd_array_we0 : OUT STD_LOGIC;
        cmd_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cl_box_cl_box_Pipeline_VITIS_LOOP_22_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ctl_cmd_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ctl_cmd_stream_empty_n : IN STD_LOGIC;
        ctl_cmd_stream_read : OUT STD_LOGIC;
        add_ln22 : IN STD_LOGIC_VECTOR (31 downto 0);
        cmd_array_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        cmd_array_ce0 : OUT STD_LOGIC;
        cmd_array_we0 : OUT STD_LOGIC;
        cmd_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cl_box_cmd_array_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    cmd_array_U : component cl_box_cmd_array_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cmd_array_address0,
        ce0 => cmd_array_ce0,
        we0 => cmd_array_we0,
        d0 => cmd_array_d0,
        q0 => cmd_array_q0,
        address1 => cmd_array_address1,
        ce1 => cmd_array_ce1,
        q1 => cmd_array_q1);

    grp_cl_box_Pipeline_1_fu_173 : component cl_box_cl_box_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cl_box_Pipeline_1_fu_173_ap_start,
        ap_done => grp_cl_box_Pipeline_1_fu_173_ap_done,
        ap_idle => grp_cl_box_Pipeline_1_fu_173_ap_idle,
        ap_ready => grp_cl_box_Pipeline_1_fu_173_ap_ready,
        cmd_array_address0 => grp_cl_box_Pipeline_1_fu_173_cmd_array_address0,
        cmd_array_ce0 => grp_cl_box_Pipeline_1_fu_173_cmd_array_ce0,
        cmd_array_we0 => grp_cl_box_Pipeline_1_fu_173_cmd_array_we0,
        cmd_array_d0 => grp_cl_box_Pipeline_1_fu_173_cmd_array_d0);

    grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179 : component cl_box_cl_box_Pipeline_VITIS_LOOP_22_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start,
        ap_done => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done,
        ap_idle => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_idle,
        ap_ready => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_ready,
        ctl_cmd_stream_dout => ctl_cmd_stream_dout,
        ctl_cmd_stream_empty_n => ctl_cmd_stream_empty_n,
        ctl_cmd_stream_read => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ctl_cmd_stream_read,
        add_ln22 => add_ln22_reg_236,
        cmd_array_address0 => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_address0,
        cmd_array_ce0 => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_ce0,
        cmd_array_we0 => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_we0,
        cmd_array_d0 => grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_cl_box_Pipeline_1_fu_173_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cl_box_Pipeline_1_fu_173_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_cl_box_Pipeline_1_fu_173_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cl_box_Pipeline_1_fu_173_ap_ready = ap_const_logic_1)) then 
                    grp_cl_box_Pipeline_1_fu_173_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_ready = ap_const_logic_1)) then 
                    grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln22_reg_236 <= add_ln22_fu_197_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_231 <= ctl_cmd_stream_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ctl_cmd_stream_empty_n, ap_CS_fsm_state2, grp_cl_box_Pipeline_1_fu_173_ap_done, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ctl_cmd_stream_empty_n = ap_const_logic_0) or (grp_cl_box_Pipeline_1_fu_173_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    a_baseaddr <= cmd_array_q1;

    a_baseaddr_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            a_baseaddr_ap_vld <= ap_const_logic_1;
        else 
            a_baseaddr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_col <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln30_fu_203_p1),32));

    a_col_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_col_ap_vld <= ap_const_logic_1;
        else 
            a_col_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    a_row <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_187_p4),32));

    a_row_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_row_ap_vld <= ap_const_logic_1;
        else 
            a_row_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln22_fu_197_p2 <= std_logic_vector(unsigned(tmp_reg_231) + unsigned(ap_const_lv32_FFFFFFFF));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ctl_cmd_stream_empty_n, grp_cl_box_Pipeline_1_fu_173_ap_done)
    begin
        if (((ctl_cmd_stream_empty_n = ap_const_logic_0) or (grp_cl_box_Pipeline_1_fu_173_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done)
    begin
        if ((grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_baseaddr <= cmd_array_q0;

    b_baseaddr_ap_vld_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b_baseaddr_ap_vld <= ap_const_logic_1;
        else 
            b_baseaddr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_col <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_187_p4),32));

    b_col_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_col_ap_vld <= ap_const_logic_1;
        else 
            b_col_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_baseaddr <= cmd_array_q1;

    c_baseaddr_ap_vld_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            c_baseaddr_ap_vld <= ap_const_logic_1;
        else 
            c_baseaddr_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    cmd_array_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_cl_box_Pipeline_1_fu_173_cmd_array_address0, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            cmd_array_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cmd_array_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmd_array_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cmd_array_address0 <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cmd_array_address0 <= grp_cl_box_Pipeline_1_fu_173_cmd_array_address0;
        else 
            cmd_array_address0 <= "XXX";
        end if; 
    end process;


    cmd_array_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            cmd_array_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            cmd_array_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            cmd_array_address1 <= "XXX";
        end if; 
    end process;


    cmd_array_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, grp_cl_box_Pipeline_1_fu_173_cmd_array_ce0, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cmd_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cmd_array_ce0 <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cmd_array_ce0 <= grp_cl_box_Pipeline_1_fu_173_cmd_array_ce0;
        else 
            cmd_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    cmd_array_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            cmd_array_ce1 <= ap_const_logic_1;
        else 
            cmd_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    cmd_array_d0_assign_proc : process(ap_CS_fsm_state2, grp_cl_box_Pipeline_1_fu_173_cmd_array_d0, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_d0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cmd_array_d0 <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cmd_array_d0 <= grp_cl_box_Pipeline_1_fu_173_cmd_array_d0;
        else 
            cmd_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    cmd_array_we0_assign_proc : process(ap_CS_fsm_state2, grp_cl_box_Pipeline_1_fu_173_cmd_array_we0, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            cmd_array_we0 <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_cmd_array_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cmd_array_we0 <= grp_cl_box_Pipeline_1_fu_173_cmd_array_we0;
        else 
            cmd_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    ctl_cmd_stream_blk_n_assign_proc : process(ctl_cmd_stream_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctl_cmd_stream_blk_n <= ctl_cmd_stream_empty_n;
        else 
            ctl_cmd_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ctl_cmd_stream_read_assign_proc : process(ctl_cmd_stream_empty_n, ap_CS_fsm_state2, grp_cl_box_Pipeline_1_fu_173_ap_done, grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ctl_cmd_stream_read, ap_CS_fsm_state4)
    begin
        if ((not(((ctl_cmd_stream_empty_n = ap_const_logic_0) or (grp_cl_box_Pipeline_1_fu_173_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctl_cmd_stream_read <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ctl_cmd_stream_read <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ctl_cmd_stream_read;
        else 
            ctl_cmd_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_cl_box_Pipeline_1_fu_173_ap_start <= grp_cl_box_Pipeline_1_fu_173_ap_start_reg;
    grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start <= grp_cl_box_Pipeline_VITIS_LOOP_22_1_fu_179_ap_start_reg;
    grp_fu_187_p4 <= cmd_array_q0(31 downto 16);
    trunc_ln30_fu_203_p1 <= cmd_array_q0(16 - 1 downto 0);
    trunc_ln32_fu_217_p1 <= cmd_array_q0(16 - 1 downto 0);
    work_id <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln32_fu_217_p1),32));

    work_id_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            work_id_ap_vld <= ap_const_logic_1;
        else 
            work_id_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
