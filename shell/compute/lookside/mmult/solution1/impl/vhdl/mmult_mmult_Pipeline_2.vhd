-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_mmult_Pipeline_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_systolic_AWVALID : OUT STD_LOGIC;
    m_axi_systolic_AWREADY : IN STD_LOGIC;
    m_axi_systolic_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_systolic_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_systolic_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_systolic_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_systolic_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_WVALID : OUT STD_LOGIC;
    m_axi_systolic_WREADY : IN STD_LOGIC;
    m_axi_systolic_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_systolic_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_systolic_WLAST : OUT STD_LOGIC;
    m_axi_systolic_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_ARVALID : OUT STD_LOGIC;
    m_axi_systolic_ARREADY : IN STD_LOGIC;
    m_axi_systolic_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_systolic_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_systolic_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_systolic_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_systolic_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_systolic_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_RVALID : IN STD_LOGIC;
    m_axi_systolic_RREADY : OUT STD_LOGIC;
    m_axi_systolic_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_systolic_RLAST : IN STD_LOGIC;
    m_axi_systolic_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_systolic_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_BVALID : IN STD_LOGIC;
    m_axi_systolic_BREADY : OUT STD_LOGIC;
    m_axi_systolic_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_systolic_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_systolic_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln108 : IN STD_LOGIC_VECTOR (57 downto 0);
    localB_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_ce0 : OUT STD_LOGIC;
    localB_we0 : OUT STD_LOGIC;
    localB_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_1_ce0 : OUT STD_LOGIC;
    localB_1_we0 : OUT STD_LOGIC;
    localB_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_2_ce0 : OUT STD_LOGIC;
    localB_2_we0 : OUT STD_LOGIC;
    localB_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_3_ce0 : OUT STD_LOGIC;
    localB_3_we0 : OUT STD_LOGIC;
    localB_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_4_ce0 : OUT STD_LOGIC;
    localB_4_we0 : OUT STD_LOGIC;
    localB_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_5_ce0 : OUT STD_LOGIC;
    localB_5_we0 : OUT STD_LOGIC;
    localB_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_6_ce0 : OUT STD_LOGIC;
    localB_6_we0 : OUT STD_LOGIC;
    localB_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_7_ce0 : OUT STD_LOGIC;
    localB_7_we0 : OUT STD_LOGIC;
    localB_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_8_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_8_ce0 : OUT STD_LOGIC;
    localB_8_we0 : OUT STD_LOGIC;
    localB_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_9_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_9_ce0 : OUT STD_LOGIC;
    localB_9_we0 : OUT STD_LOGIC;
    localB_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_10_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_10_ce0 : OUT STD_LOGIC;
    localB_10_we0 : OUT STD_LOGIC;
    localB_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_11_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_11_ce0 : OUT STD_LOGIC;
    localB_11_we0 : OUT STD_LOGIC;
    localB_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_12_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_12_ce0 : OUT STD_LOGIC;
    localB_12_we0 : OUT STD_LOGIC;
    localB_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_13_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_13_ce0 : OUT STD_LOGIC;
    localB_13_we0 : OUT STD_LOGIC;
    localB_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_14_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_14_ce0 : OUT STD_LOGIC;
    localB_14_we0 : OUT STD_LOGIC;
    localB_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localB_15_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    localB_15_ce0 : OUT STD_LOGIC;
    localB_15_we0 : OUT STD_LOGIC;
    localB_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mmult_mmult_Pipeline_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv480_lc_1 : STD_LOGIC_VECTOR (479 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal exitcond11567_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op27_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exitcond11567_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal systolic_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond11567_reg_497_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_29_fu_385_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_reg_501 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_reg_501_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_30_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_30_reg_505_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_17_reg_509_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal systolic_addr_read_reg_514 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_phi_mux_empty_27_phi_fu_350_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_27_reg_347 : STD_LOGIC_VECTOR (511 downto 0);
    signal shiftreg2_cast_fu_419_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_cast9_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shiftreg2_fu_120 : STD_LOGIC_VECTOR (479 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal loop_index7_fu_124 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_379_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_loop_index7_load : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_28_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component mmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    loop_index7_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond11567_fu_373_p2 = ap_const_lv1_0))) then 
                    loop_index7_fu_124 <= empty_fu_379_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    loop_index7_fu_124 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    shiftreg2_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    shiftreg2_fu_120 <= ap_const_lv480_lc_1;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    shiftreg2_fu_120 <= ap_phi_mux_empty_27_phi_fu_350_p4(511 downto 32);
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                empty_29_reg_501_pp0_iter1_reg <= empty_29_reg_501;
                empty_30_reg_505_pp0_iter1_reg <= empty_30_reg_505;
                exitcond11567_reg_497 <= exitcond11567_fu_373_p2;
                exitcond11567_reg_497_pp0_iter1_reg <= exitcond11567_reg_497;
                tmp_17_reg_509_pp0_iter1_reg <= tmp_17_reg_509;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond11567_fu_373_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_29_reg_501 <= empty_29_fu_385_p1;
                empty_30_reg_505 <= empty_30_fu_389_p2;
                tmp_17_reg_509 <= ap_sig_allocacmp_loop_index7_load(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                systolic_addr_read_reg_514 <= m_axi_systolic_RDATA;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_systolic_RVALID, ap_predicate_op27_read_state2)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (m_axi_systolic_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_systolic_RVALID, ap_predicate_op27_read_state2)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (m_axi_systolic_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_systolic_RVALID, ap_predicate_op27_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (m_axi_systolic_RVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, exitcond11567_fu_373_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond11567_fu_373_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond11567_reg_497, ap_block_pp0_stage0_subdone)
    begin
        if (((exitcond11567_reg_497 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_empty_27_phi_fu_350_p4_assign_proc : process(exitcond11567_reg_497_pp0_iter1_reg, empty_30_reg_505_pp0_iter1_reg, systolic_addr_read_reg_514, ap_phi_reg_pp0_iter2_empty_27_reg_347, shiftreg2_cast_fu_419_p1)
    begin
        if ((exitcond11567_reg_497_pp0_iter1_reg = ap_const_lv1_0)) then
            if ((empty_30_reg_505_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_empty_27_phi_fu_350_p4 <= shiftreg2_cast_fu_419_p1;
            elsif ((empty_30_reg_505_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_empty_27_phi_fu_350_p4 <= systolic_addr_read_reg_514;
            else 
                ap_phi_mux_empty_27_phi_fu_350_p4 <= ap_phi_reg_pp0_iter2_empty_27_reg_347;
            end if;
        else 
            ap_phi_mux_empty_27_phi_fu_350_p4 <= ap_phi_reg_pp0_iter2_empty_27_reg_347;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_empty_27_reg_347 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op27_read_state2_assign_proc : process(exitcond11567_reg_497, empty_30_reg_505)
    begin
                ap_predicate_op27_read_state2 <= ((empty_30_reg_505 = ap_const_lv1_1) and (exitcond11567_reg_497 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_loop_index7_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, loop_index7_fu_124)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_loop_index7_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_loop_index7_load <= loop_index7_fu_124;
        end if; 
    end process;

    empty_28_fu_424_p1 <= ap_phi_mux_empty_27_phi_fu_350_p4(32 - 1 downto 0);
    empty_29_fu_385_p1 <= ap_sig_allocacmp_loop_index7_load(4 - 1 downto 0);
    empty_30_fu_389_p2 <= "1" when (empty_29_fu_385_p1 = ap_const_lv4_0) else "0";
    empty_fu_379_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_loop_index7_load) + unsigned(ap_const_lv9_1));
    exitcond11567_fu_373_p2 <= "1" when (ap_sig_allocacmp_loop_index7_load = ap_const_lv9_100) else "0";
    localB_10_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_10_ce0 <= ap_const_logic_1;
        else 
            localB_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_10_d0 <= empty_28_fu_424_p1;

    localB_10_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_10_we0 <= ap_const_logic_1;
        else 
            localB_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_11_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_11_ce0 <= ap_const_logic_1;
        else 
            localB_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_11_d0 <= empty_28_fu_424_p1;

    localB_11_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_11_we0 <= ap_const_logic_1;
        else 
            localB_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_12_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_12_ce0 <= ap_const_logic_1;
        else 
            localB_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_12_d0 <= empty_28_fu_424_p1;

    localB_12_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_12_we0 <= ap_const_logic_1;
        else 
            localB_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_13_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_13_ce0 <= ap_const_logic_1;
        else 
            localB_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_13_d0 <= empty_28_fu_424_p1;

    localB_13_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_13_we0 <= ap_const_logic_1;
        else 
            localB_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_14_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_14_ce0 <= ap_const_logic_1;
        else 
            localB_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_14_d0 <= empty_28_fu_424_p1;

    localB_14_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_14_we0 <= ap_const_logic_1;
        else 
            localB_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_15_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_15_ce0 <= ap_const_logic_1;
        else 
            localB_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_15_d0 <= empty_28_fu_424_p1;

    localB_15_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_15_we0 <= ap_const_logic_1;
        else 
            localB_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_1_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_1_ce0 <= ap_const_logic_1;
        else 
            localB_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_1_d0 <= empty_28_fu_424_p1;

    localB_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_1_we0 <= ap_const_logic_1;
        else 
            localB_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_2_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_2_ce0 <= ap_const_logic_1;
        else 
            localB_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_2_d0 <= empty_28_fu_424_p1;

    localB_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_2_we0 <= ap_const_logic_1;
        else 
            localB_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_3_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_3_ce0 <= ap_const_logic_1;
        else 
            localB_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_3_d0 <= empty_28_fu_424_p1;

    localB_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_3_we0 <= ap_const_logic_1;
        else 
            localB_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_4_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_4_ce0 <= ap_const_logic_1;
        else 
            localB_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_4_d0 <= empty_28_fu_424_p1;

    localB_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_4_we0 <= ap_const_logic_1;
        else 
            localB_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_5_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_5_ce0 <= ap_const_logic_1;
        else 
            localB_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_5_d0 <= empty_28_fu_424_p1;

    localB_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_5_we0 <= ap_const_logic_1;
        else 
            localB_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_6_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_6_ce0 <= ap_const_logic_1;
        else 
            localB_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_6_d0 <= empty_28_fu_424_p1;

    localB_6_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_6_we0 <= ap_const_logic_1;
        else 
            localB_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_7_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_7_ce0 <= ap_const_logic_1;
        else 
            localB_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_7_d0 <= empty_28_fu_424_p1;

    localB_7_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_7_we0 <= ap_const_logic_1;
        else 
            localB_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_8_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_8_ce0 <= ap_const_logic_1;
        else 
            localB_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_8_d0 <= empty_28_fu_424_p1;

    localB_8_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_8_we0 <= ap_const_logic_1;
        else 
            localB_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_9_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_9_ce0 <= ap_const_logic_1;
        else 
            localB_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_9_d0 <= empty_28_fu_424_p1;

    localB_9_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_9_we0 <= ap_const_logic_1;
        else 
            localB_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_address0 <= p_cast9_fu_454_p1(4 - 1 downto 0);

    localB_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_ce0 <= ap_const_logic_1;
        else 
            localB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    localB_d0 <= empty_28_fu_424_p1;

    localB_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, empty_29_reg_501_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (empty_29_reg_501_pp0_iter1_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localB_we0 <= ap_const_logic_1;
        else 
            localB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_systolic_ARADDR <= ap_const_lv64_0;
    m_axi_systolic_ARBURST <= ap_const_lv2_0;
    m_axi_systolic_ARCACHE <= ap_const_lv4_0;
    m_axi_systolic_ARID <= ap_const_lv1_0;
    m_axi_systolic_ARLEN <= ap_const_lv32_0;
    m_axi_systolic_ARLOCK <= ap_const_lv2_0;
    m_axi_systolic_ARPROT <= ap_const_lv3_0;
    m_axi_systolic_ARQOS <= ap_const_lv4_0;
    m_axi_systolic_ARREGION <= ap_const_lv4_0;
    m_axi_systolic_ARSIZE <= ap_const_lv3_0;
    m_axi_systolic_ARUSER <= ap_const_lv1_0;
    m_axi_systolic_ARVALID <= ap_const_logic_0;
    m_axi_systolic_AWADDR <= ap_const_lv64_0;
    m_axi_systolic_AWBURST <= ap_const_lv2_0;
    m_axi_systolic_AWCACHE <= ap_const_lv4_0;
    m_axi_systolic_AWID <= ap_const_lv1_0;
    m_axi_systolic_AWLEN <= ap_const_lv32_0;
    m_axi_systolic_AWLOCK <= ap_const_lv2_0;
    m_axi_systolic_AWPROT <= ap_const_lv3_0;
    m_axi_systolic_AWQOS <= ap_const_lv4_0;
    m_axi_systolic_AWREGION <= ap_const_lv4_0;
    m_axi_systolic_AWSIZE <= ap_const_lv3_0;
    m_axi_systolic_AWUSER <= ap_const_lv1_0;
    m_axi_systolic_AWVALID <= ap_const_logic_0;
    m_axi_systolic_BREADY <= ap_const_logic_0;

    m_axi_systolic_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op27_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_systolic_RREADY <= ap_const_logic_1;
        else 
            m_axi_systolic_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_systolic_WDATA <= ap_const_lv512_lc_1;
    m_axi_systolic_WID <= ap_const_lv1_0;
    m_axi_systolic_WLAST <= ap_const_logic_0;
    m_axi_systolic_WSTRB <= ap_const_lv64_0;
    m_axi_systolic_WUSER <= ap_const_lv1_0;
    m_axi_systolic_WVALID <= ap_const_logic_0;
    p_cast9_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_reg_509_pp0_iter1_reg),64));
    shiftreg2_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shiftreg2_fu_120),512));

    systolic_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_systolic_RVALID, ap_predicate_op27_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op27_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            systolic_blk_n_R <= m_axi_systolic_RVALID;
        else 
            systolic_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

end behav;
